11-20-23
I'm having a change of heart, and feel as it's in my best interest to pivot.
So much of my time has been spent fitting the output of each ShellIndex into
the index of a Texture2DArray that will then, in turn be assigned to each 
instance of the object I want to shell texture. My new thought is this: Why
not take out the middle man?

┌─────┬──────────────────────────────────────────────────╖
│ OLD │ GLSL TOP → Texture2DArray → Material → Instances ║
├─────┼──────────────────────────────────────────────────╢
│ NEW │           GLSL Material → Instances              ║
╘═════╧══════════════════════════════════════════════════╝

Here is the basis for further inquiry: 
https://docs.derivative.ca/index.php?title=Write_a_GLSL_Material#Instance_Texturing

Passing information between the vertex and pixel shader may or may not be needed.


11-21-23
It should be noted that the code I'm using is based heavily from code by GarretGunnel (aka Acerola).
Repositiry - https://github.com/GarrettGunnell/Shell-Texturing
Video Explination - https://www.youtube.com/watch?v=9dr-tRQzij4

12-6-23
I've been deadlocked by this project since the 21st, but tonight I decided to start from the most basic use case possible to A. figure out how to generate a proper 2D texture array with a GLSL top and B. trouble shoot an issue with the script where it would calculate taper in 3 dimentions instead of just 2. By starting with the smallest possible script that can produce a proper 2D texture array, and then follow that with the smallest shader that reproduced the taper bug, I was able to make a large amount of progress. Once I create a build that solves these two issues compeltely, I will update the repository.

12-7-23
Both issues have been solved, and the working code has been incorporated into the pixel shader.
The next step is figuring out the vector aspect of the project, or wrapping my rectangular shell texture around a sphere.

12-8-23
There are some additional aspects of the project that I wanted to note:
1. I would want to see if changing the shells from instances of geometry to a single geometry might improve performance and fidelity.
2. I want to change the code to wipe and re-render the 2D texture array. Given point 1, I may or may not need to do this only for the 2D Texture Array version.
3. I want to create parity between updates I'm making in this document and the repository itself by using the GitHub Issues and Roadmap feature. I don't want to keep coming back to this txt doc just to know what I'm doing lol.

12-9-23
A bit of progress was made with item 2 on the list from yesterday, but as pointed out in the issues, more work is needed to support constant changed to the shell texture, for example from an LFO. It's my opinion that this functionality of continuous changes should be supported, but I'm not going to be continuing to work on this issue until I work on item 1, geometry.

12-13-23
There are a couple things of note I want to add.
First, if my goal is to make a geometric version of the GLSL script I have now, then I would need to use the Script SOP, which "can create, delete and modify points, primitives and their vertices. It can create custom attributes or built-in attributes like Cd (color), uv and N (normals). It can add polygons, bezier curves and meshes among others." The Script SOP, however, accomplishes this by using a Python script. This means that if I'm serious about making geometry to describe what I can currently accomplish with the GLSL TOP, I need to learn Python. :/ I found a great video on a beginner's overview of the operator: https://www.youtube.com/watch?v=x8lDfTFSass.
Second, I want to add a bit more functionality to the script (I guess for both GLSL and now Python): that being to have more fine control of where the stacks of shells are. Features would include describing a grid with sides of independent length and randomly offsetting the rows and columns so that it breaks up the grid and looks a bit less uniform. Additionally, I would love to have finer control over the shapes of the shell sections themselves (whether circles, squares, whatever. Ideally, this would be described by a SOP input for the script to use and changed using TouchDesigner, since the Script SOP can take SOP inputs).
Third, I would like to boil this whole project down into a more easily useable component. In it's current state using Geometry Instancing, there might be a way to output the actual Geometry being instanced, but it would be more obtuse than I would like. With the Script SOP, the whole script would live in SOP land without needing to cross over anywhere else.
Fourth: I would love to have better support for non-grid shapes, most notably spheres. I saw a video yesterday about a UV unwrap-like effect achievable in TouchDesigner (https://www.youtube.com/watch?v=HPun50ej4W8), and thought that this could be integrated into the design. For example, the Script SOP could use the first input to pass the shape of the "strands" being passed though, and the second input could be the shape of the object being covered in "strands".
