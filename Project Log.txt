11-20-23
I'm having a change of heart, and feel as it's in my best interest to pivot.
So much of my time has been spent fitting the output of each ShellIndex into
the index of a Texture2DArray that will then, in turn be assigned to each 
instance of the object I want to shell texture. My new thought is this: Why
not take out the middle man?

┌─────┬──────────────────────────────────────────────────╖
│ OLD │ GLSL TOP → Texture2DArray → Material → Instances ║
├─────┼──────────────────────────────────────────────────╢
│ NEW │           GLSL Material → Instances              ║
╘═════╧══════════════════════════════════════════════════╝

Here is the basis for further inquiry: 
https://docs.derivative.ca/index.php?title=Write_a_GLSL_Material#Instance_Texturing

Passing information between the vertex and pixel shader may or may not be needed.


11-21-23
It should be noted that the code I'm using is based heavily from code by GarretGunnel (aka Acerola).
Repositiry - https://github.com/GarrettGunnell/Shell-Texturing
Video Explination - https://www.youtube.com/watch?v=9dr-tRQzij4

12-6-23
I've been deadlocked by this project since the 21st, but tonight I decided to start from the most basic use case possible to A. figure out how to generate a proper 2D texture array with a GLSL top and B. trouble shoot an issue with the script where it would calculate taper in 3 dimentions instead of just 2. By starting with the smallest possible script that can produce a proper 2D texture array, and then follow that with the smallest shader that reproduced the taper bug, I was able to make a large amount of progress. Once I create a build that solves these two issues compeltely, I will update the repository.

12-7-23
Both issues have been solved, and the working code has been incorporated into the pixel shader.
The next step is figuring out the vector aspect of the project, or wrapping my rectangular shell texture around a sphere.

12-8-23
There are some additional aspects of the project that I wanted to note:
1. I would want to see if changing the shells from instances of geometry to a single geometry might improve performance and fidelity.
2. I want to change the code to wipe and re-render the 2D texture array. Given point 1, I may or may not need to do this only for the 2D Texture Array version.
3. I want to create parity between updates I'm making in this document and the repository itself by using the GitHub Issues and Roadmap feature. I don't want to keep coming back to this txt doc just to know what I'm doing lol.
